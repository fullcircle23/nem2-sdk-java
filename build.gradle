/*
 * Copyright 2018 NEM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.2'
        classpath "org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.8.2"
    }
}

plugins {
    id "org.sonarqube" version "2.7"
}

apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'jacoco'

ext {
    vertxVersion = "3.5.0"
    rxjavaVersion = "2.1.7"
    junitVersion = "5.0.2"
    restApiVersion = "0.7.18-SNAPSHOT"
    jackson_version = "2.9.9"
    jackson_databind_version = "2.9.9"
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots"
    }
}

def getPropertyValue(key) {
    def value = project.hasProperty(key) ? project[key] : System.getenv(key)
    return value?.trim() == '' ? null : value
}

def ossrhUsername = getPropertyValue('ossrhUsername');
def ossrhPassword = getPropertyValue('ossrhPassword');

def sonarProjectKey = getPropertyValue('sonarProjectKey');
def sonarLogin = getPropertyValue('sonarLogin');
def sonarOrganization = getPropertyValue('sonarOrganization');
def sonarHostUrl = getPropertyValue('sonarHostUrl');
def sonarBranchName = getPropertyValue('sonarBranchName');

def signingSecretKeyRingFile = getPropertyValue('signingSecretKeyRingFile')
def signingKeyId = getPropertyValue('signingKeyId')
def signingPassword = getPropertyValue('signingPassword')


allprojects {
    ext."signing.keyId" = signingKeyId
    ext."signing.secretKeyRingFile" = signingSecretKeyRingFile
    ext."signing.password" = signingPassword
}

subprojects {

    apply plugin: 'org.junit.platform.gradle.plugin'
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'jacoco'
    apply plugin: 'org.sonarqube'
    apply plugin: 'project-report'
    group 'io.nem'
    sourceCompatibility = 1.8
    version = '0.13.0-SNAPSHOT'


    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url "https://oss.sonatype.org/content/repositories/snapshots"
        }
    }

    javadoc {
        failOnError = true
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc
    }

    artifacts {
        archives javadocJar, sourcesJar
    }

    junitPlatform {
        details 'tree'
        platformVersion '1.0.2' // optional, defaults to plugin version
        reportsDir file('build/test-results/junit-platform') // this is the default
        enableStandardTestTask true
        // selectors (optional)
        // filters (optional)
        filters {
            excludeClassNamePatterns '.*IntegrationTest*'
        }
    }

    tasks.whenTaskAdded { task ->
        if (task.name.equals('junitPlatformTest')) {
            System.out.println("ADDING TASK " + task.getName() + " to the project!")

            // configure jacoco to analyze the junitPlatformTest task
            jacoco {
                // this tool version is compatible with
//                toolVersion = "0.7.6.201602180812"
                applyTo task
            }

            // create junit platform jacoco task
            project.task(type: JacocoReport, "junitPlatformJacocoReport",
                    {
                        sourceDirectories = files("./src/main")
                        classDirectories = files("$buildDir/classes/main")
                        executionData task
                    })
        }
    }

    jacoco {
//        toolVersion = '0.7.9'
        applyTo junitPlatformTest
    }

    jacocoTestReport {
        afterEvaluate {
            classDirectories = files(classDirectories.files.collect {
                fileTree(dir: it, exclude: ['**/*DTO.*', '**/*Buffer.*'])
            })
        }
        reports {
            xml.enabled true
            csv.enabled true
            html.destination file("${buildDir}/jacocoHtml")
        }
    }

    junitPlatformTest {
        jacoco {
            destinationFile = file("${buildDir}/jacoco/test.exec")
        }
    }

    dependencies {
        // Tests
        testCompile 'org.hamcrest:hamcrest-core:1.3'
        testCompile 'org.hamcrest:hamcrest-library:1.3'
        testCompile 'org.mockito:mockito-all:1.9.5'
        testCompile 'org.slf4j:slf4j-simple:1.7.25'
        testCompile "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
        testCompile "org.junit.jupiter:junit-jupiter-params:${junitVersion}"
        testRuntime "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
        testCompile 'org.junit.platform:junit-platform-console-standalone:1.1.0-M1'
        testCompile 'org.apiguardian:apiguardian-api:1.0.0'
    }
    if (signingKeyId != null) {
        apply plugin: 'signing'
        signing {
            sign configurations.archives
        }
    }
    uploadArchives {

        repositories {
            mavenDeployer {
                if (signingKeyId != null) {
                    beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
                }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                pom.project {
                    packaging 'jar'
                    url 'https://github.com/nemtech/nem2-sdk-java'

                    scm {
                        connection 'scm:git:https://github.com/nemtech/nem2-sdk-java.git'
                        developerConnection 'scm:svn:https://github.com/nemtech/nem2-sdk-java'
                        url 'https://github.com/nemtech/nem2-sdk-java'
                    }

                    licenses {
                        license {
                            name 'The Apache License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                }
            }
        }
    }
}

def publishedProjects = subprojects

task jacocoMerge(type: JacocoMerge) {
    publishedProjects.each { subproject ->
        executionData subproject.tasks.withType(Test)
    }
    doFirst {
        executionData = files(executionData.findAll { it.exists() })
    }
}


task jacocoRootReport(type: JacocoReport, group: 'Coverage reports') {
    description = 'Generates an aggregate report from all subprojects'
    dependsOn publishedProjects.test, jacocoMerge

    additionalSourceDirs = files(publishedProjects.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(publishedProjects.sourceSets.main.allSource.srcDirs)
    classDirectories = files(publishedProjects.sourceSets.main.output)
    executionData jacocoMerge.destinationFile

    reports {
        html.enabled = true // human readable
        xml.enabled = true // required by coveralls
    }
}

coveralls {
    sourceDirs = publishedProjects.sourceSets.main.allSource.srcDirs.flatten()
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
}

tasks.coveralls {
    group = 'Coverage reports'
    description = 'Uploads the aggregated coverage report to Coveralls'
    dependsOn jacocoRootReport
}

def gitBranch() {
    def branch = ""
    def proc = "git rev-parse --abbrev-ref HEAD".execute()
    proc.in.eachLine { line -> branch = line }
    proc.err.eachLine { line -> println line }
    proc.waitFor()
    branch
}

sonarqube {
    properties {
 //       property "sonar.branch.name", sonarBranchName == null ? gitBranch() : sonarBranchName
        property "sonar.projectKey", sonarProjectKey
        property "sonar.projectName", sonarProjectKey
        property "sonar.organization", sonarOrganization
        property "sonar.login", sonarLogin
        property "sonar.host.url", sonarHostUrl
        property "sonar.exclusions", "**/io/nem/catapult/builders/**"
    }
}
